/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client;

import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.LinkedHashMap;
import java.util.StringTokenizer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JOptionPane;

/**
 *
 * @author Win 10
 */
public class LoginFrame extends javax.swing.JFrame implements Runnable {

    Socket socket;
    BufferedWriter out;
    BufferedReader in;

//    public static int numThread = 2;
//    static ExecutorService executor = Executors.newFixedThreadPool(numThread);
//    static ReceiveMessage recv;
    Thread t;
    public String receive = "";
    LinkedHashMap<String, ChatFrame> map = new LinkedHashMap<>();
//    LinkedHashMap<String, ChatFrame> maptemp = new LinkedHashMap<>();

    /**
     * Creates new form ChatFrame
     */
    public LoginFrame() {
        initComponents();
        this.setResizable(false);
        this.setTitle("Login");
        this.btnCre.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblNickname = new javax.swing.JLabel();
        txtNickname = new javax.swing.JTextField();
        btnOk = new javax.swing.JButton();
        btnCre = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblSize = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtPort.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPort.setText("1234");
        txtPort.setFocusable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("PORT:");

        lblNickname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNickname.setText("NICKNAME:");

        txtNickname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNickname.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCre.setText("Bắt đầu chat");
        btnCre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Số lượng online: ");

        lblSize.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblSize.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCre, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lblSize)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(lblNickname))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOk, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNickname)
                        .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblSize))
                .addGap(40, 40, 40)
                .addComponent(btnCre, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // TODO add your handling code here:
        String msg = txtNickname.getText();
        if (msg.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Bạn chưa nhập nickname!!!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int port = Integer.parseInt(txtPort.getText());
            Thread th = new Thread() {
                public void run() {
                    try {
                        socket = new Socket("localhost", port);
                        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                        out.write(txtNickname.getText());
                        out.newLine();
                        out.flush();
                        String line = in.readLine().toLowerCase();

                        if (line.equals("0")) {
                            JOptionPane.showMessageDialog(null, "Nickname này đã có, hãy tạo nickname khác!!!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                            System.out.println(line);
                            return;
                        } else {
//                            if (!line.contains("WAIT")) {
                                System.out.println(line);
                                txtNickname.setEnabled(false);
                                lblNickname.setText("XIN CHAO: " + txtNickname.getText());
                                btnOk.setEnabled(false);
                                btnCre.setEnabled(true);
                                System.out.println("in: " + in);
                                System.out.println(".run()" + socket + " this is " + txtNickname.getText());
                                t = new Thread(LoginFrame.this);
                                t.start();
//                            }
                        }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Lỗi kết nối, không tìm thấy server!!!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        return;
//                        e.printStackTrace();
                    }
                }
            };
            th.start();
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreActionPerformed
        // TODO add your handling code here:
        btnCre.setEnabled(false);
        try {
            out.write("CREATE:" + txtNickname.getText());
            out.newLine();
            out.flush();
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btnCreActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            out.write("BYEBYEBYE");
            out.newLine();
            out.flush();
            socket.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnCre;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblNickname;
    private javax.swing.JLabel lblSize;
    private javax.swing.JTextField txtNickname;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        ChatFrame c = null;
//        lblSize.setText(String.valueOf(Server.ServerFrame.workers.size()));
        while (true) {
            try {
                
                String line = in.readLine();
                receive = line;
                if(receive.contains("ONLINE")){
                    StringTokenizer st = new StringTokenizer(receive, "ONLINE:");
                    String size = st.nextToken();
                    lblSize.setText(size);
                }
                if (receive.equals("WAIT")) {
                    JOptionPane.showMessageDialog(null, "Hãy chờ người khác tham gia!!!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    this.btnCre.setEnabled(true);
                }
                if (receive.equals("USERISCHATTING")) {
                    JOptionPane.showMessageDialog(null, "Người dùng hiện đang bận!!!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    this.btnCre.setEnabled(true);
                }
                if (receive.contains("WANT TO CHAT")) {
                    String temp[] = receive.split(":");
                    temp[0] = temp[0].replaceAll("WANT TO CHAT", "muốn trò chuyện với bạn.");
                    int choose = JOptionPane.showOptionDialog(null, temp[0],
                            "Thông báo",
                            JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
                    if (choose == JOptionPane.YES_OPTION) {
                        System.out.println("Nếu có vào đây");
                        System.out.println("ACCEPT:" + temp[1] + ":" + temp[2]);
                        out.write("IACCEPT:" + temp[1] + ":" + temp[2]);
                        out.newLine();
                        out.flush();
                        c = new ChatFrame(socket, txtNickname.getText(), temp[2], Integer.parseInt(temp[1]), Thread.currentThread().getName());
                        c.setVisible(true);
                        btnCre.setEnabled(false);
                    }
                    if (choose == JOptionPane.NO_OPTION) {
                        System.out.println("Nếu không vào đây");
                        System.out.println("NO:" + temp[1] + ":" + temp[2]);
                        this.btnCre.setEnabled(true);

                        out.write("NO:" + temp[1] + ":" + temp[2]);
                        out.newLine();
                        out.flush();

                    }
                }

                if (receive.equals("DECLINE")) {
                    JOptionPane.showMessageDialog(null, "Người dùng đã từ chối!!!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    btnCre.setEnabled(true);
                }

                if (receive.contains("ACCEPTED:")) {
                    String split[] = receive.split(":");
                    btnCre.setEnabled(false);
                    c = new ChatFrame(socket, txtNickname.getText(), split[2], Integer.parseInt(split[1]), Thread.currentThread().getName());
                    c.setVisible(true);
                    btnCre.setEnabled(false);
                }
                if (receive.contains("TEXT;From:")) {
                    String split[] = receive.split(";");
                    System.out.println(receive);
                    if (line.contains("TEXT;From: ")) {
                        ChatFrame.txtArea.setText(ChatFrame.txtArea.getText() + split[1] + "\n");
                        ChatFrame.txtChat.setText("");
                        ChatFrame.txtChat.requestFocus();
                    }
                    System.out.println("map: " + map.toString());
                }
                if (receive.contains("EXIT:")) {
                    System.out.println(receive);
                    String split[] = receive.split(":");
                    int i = JOptionPane.showOptionDialog(null, split[1] + " đã thoát khỏi cuộc trò chuyện.",
                            "Thông báo",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
                    if (i == 0) {
                        c.dispose();
                    }
//                    this.setVisible(true);
                    btnCre.setEnabled(true);

                    System.out.println("exit: " + map.toString());
                }
                if (receive.contains("BACKTOLOGIN:")) {

                    c.dispose();
                    String split[] = receive.split(":");
//                    this.setVisible(true);
                    btnCre.setEnabled(true);
                    System.out.println(receive);
                    System.out.println("back: " + map.toString());
                }
            } catch (Exception e) {
            }
        }

    }
}
